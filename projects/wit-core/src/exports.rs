// Generated by `wit-bindgen` 0.13.2. DO NOT EDIT!
pub mod exports {
    pub mod v {
        pub mod core {

            #[allow(clippy::all)]
            pub mod number {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Sign {}
                impl ::core::fmt::Debug for Sign {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {}
                    }
                }

                impl Sign {
                    pub(crate) unsafe fn _lift(val: u8) -> Sign {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                pub type Natural = wit_bindgen::rt::vec::Vec<u8>;
                #[derive(Clone)]
                pub struct Integer {
                    pub sign: Sign,
                    pub natural: Natural,
                }
                impl ::core::fmt::Debug for Integer {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Integer").field("sign", &self.sign).field("natural", &self.natural).finish()
                    }
                }
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#Natural.new_u64"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_natural_new_u64(arg0: i64) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_NaturalImpl as GuestNatural>::new_u64(arg0 as u64);
                        let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                        let vec2 = (result0).into_boxed_slice();
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        ::core::mem::forget(vec2);
                        *((ptr1 + 4) as *mut i32) = len2;
                        *((ptr1 + 0) as *mut i32) = ptr2;
                        ptr1
                    }

                    const _: () = {
                        #[doc(hidden)]
                        #[export_name = "cabi_post_v:core/number#Natural.new_u64"]
                        #[allow(non_snake_case)]
                        unsafe extern "C" fn __post_return_natural_new_u64(arg0: i32) {
                            let l0 = *((arg0 + 0) as *const i32);
                            let l1 = *((arg0 + 4) as *const i32);
                            let base2 = l0;
                            let len2 = l1;
                            wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
                        }
                    };
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#Natural.add_u64"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_natural_add_u64(arg0: i32, arg1: i32, arg2: i64) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let result1 = <_NaturalImpl as GuestNatural>::add_u64(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            arg2 as u64,
                        );
                        let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                        let vec3 = (result1).into_boxed_slice();
                        let ptr3 = vec3.as_ptr() as i32;
                        let len3 = vec3.len() as i32;
                        ::core::mem::forget(vec3);
                        *((ptr2 + 4) as *mut i32) = len3;
                        *((ptr2 + 0) as *mut i32) = ptr3;
                        ptr2
                    }

                    const _: () = {
                        #[doc(hidden)]
                        #[export_name = "cabi_post_v:core/number#Natural.add_u64"]
                        #[allow(non_snake_case)]
                        unsafe extern "C" fn __post_return_natural_add_u64(arg0: i32) {
                            let l0 = *((arg0 + 0) as *const i32);
                            let l1 = *((arg0 + 4) as *const i32);
                            let base2 = l0;
                            let len2 = l1;
                            wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
                        }
                    };
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#Natural.add_u64_inplace"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_natural_add_u64_inplace(arg0: i32, arg1: i32, arg2: i64) {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        <_NaturalImpl as GuestNatural>::add_u64_inplace(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            arg2 as u64,
                        );
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#Natural.add_nat"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_natural_add_nat(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let len1 = arg3 as usize;
                        let result2 = <_NaturalImpl as GuestNatural>::add_nat(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            Vec::from_raw_parts(arg2 as *mut _, len1, len1),
                        );
                        let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                        let vec4 = (result2).into_boxed_slice();
                        let ptr4 = vec4.as_ptr() as i32;
                        let len4 = vec4.len() as i32;
                        ::core::mem::forget(vec4);
                        *((ptr3 + 4) as *mut i32) = len4;
                        *((ptr3 + 0) as *mut i32) = ptr4;
                        ptr3
                    }

                    const _: () = {
                        #[doc(hidden)]
                        #[export_name = "cabi_post_v:core/number#Natural.add_nat"]
                        #[allow(non_snake_case)]
                        unsafe extern "C" fn __post_return_natural_add_nat(arg0: i32) {
                            let l0 = *((arg0 + 0) as *const i32);
                            let l1 = *((arg0 + 4) as *const i32);
                            let base2 = l0;
                            let len2 = l1;
                            wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
                        }
                    };
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#Natural.add_nat_inplace"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_natural_add_nat_inplace(arg0: i32, arg1: i32, arg2: i32, arg3: i32) {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let len1 = arg3 as usize;
                        <_NaturalImpl as GuestNatural>::add_nat_inplace(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            Vec::from_raw_parts(arg2 as *mut _, len1, len1),
                        );
                    }
                };
                use super::super::super::super::Natural as _NaturalImpl;
                pub trait GuestNatural {
                    fn new_u64(n: u64) -> Natural;
                    fn add_u64(&self, rhs: u64) -> Natural;
                    fn add_u64_inplace(&self, rhs: u64);
                    fn add_nat(&self, rhs: Natural) -> Natural;
                    fn add_nat_inplace(&self, rhs: Natural);
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(4))]
                struct _RetArea([u8; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
            }

            #[allow(clippy::all)]
            pub mod text {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                pub type Utf8Text = wit_bindgen::rt::vec::Vec<u8>;
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/text#recast"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_recast(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let len1 = arg3 as usize;
                        let result2 = <_GuestImpl as Guest>::recast(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            Vec::from_raw_parts(arg2 as *mut _, len1, len1),
                        );
                        let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                        let super::super::super::super::exports::v::core::number::Integer { sign: sign4, natural: natural4 } =
                            result2;
                        *((ptr3 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
                        let vec5 = (natural4).into_boxed_slice();
                        let ptr5 = vec5.as_ptr() as i32;
                        let len5 = vec5.len() as i32;
                        ::core::mem::forget(vec5);
                        *((ptr3 + 8) as *mut i32) = len5;
                        *((ptr3 + 4) as *mut i32) = ptr5;
                        ptr3
                    }

                    const _: () = {
                        #[doc(hidden)]
                        #[export_name = "cabi_post_v:core/text#recast"]
                        #[allow(non_snake_case)]
                        unsafe extern "C" fn __post_return_recast(arg0: i32) {
                            let l0 = *((arg0 + 4) as *const i32);
                            let l1 = *((arg0 + 8) as *const i32);
                            let base2 = l0;
                            let len2 = l1;
                            wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
                        }
                    };
                };
                use super::super::super::super::text as _GuestImpl;
                pub trait Guest {
                    fn recast(self_: Utf8Text, rhs: Utf8Text) -> super::super::super::super::exports::v::core::number::Integer;
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(4))]
                struct _RetArea([u8; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:core"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 497] = [
    3, 0, 4, 99, 111, 114, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 243, 2, 1, 65, 2, 1, 65, 5, 1, 66, 16, 1, 109, 0, 4, 0, 4, 83,
    105, 103, 110, 3, 0, 0, 1, 112, 125, 4, 0, 7, 78, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 2, 4, 115, 105, 103, 110, 1,
    7, 110, 97, 116, 117, 114, 97, 108, 3, 4, 0, 7, 73, 110, 116, 101, 103, 101, 114, 3, 0, 4, 1, 64, 1, 1, 110, 119, 0, 3, 4,
    0, 15, 78, 97, 116, 117, 114, 97, 108, 46, 110, 101, 119, 95, 117, 54, 52, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 3, 3,
    114, 104, 115, 119, 0, 3, 4, 0, 15, 78, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 95, 117, 54, 52, 1, 7, 1, 64, 2, 4,
    115, 101, 108, 102, 3, 3, 114, 104, 115, 119, 1, 0, 4, 0, 23, 78, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 95, 117,
    54, 52, 95, 105, 110, 112, 108, 97, 99, 101, 1, 8, 1, 64, 2, 4, 115, 101, 108, 102, 3, 3, 114, 104, 115, 3, 0, 3, 4, 0, 15,
    78, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 95, 110, 97, 116, 1, 9, 1, 64, 2, 4, 115, 101, 108, 102, 3, 3, 114, 104,
    115, 3, 1, 0, 4, 0, 23, 78, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 95, 110, 97, 116, 95, 105, 110, 112, 108, 97, 99,
    101, 1, 10, 4, 1, 13, 118, 58, 99, 111, 114, 101, 47, 110, 117, 109, 98, 101, 114, 5, 0, 2, 3, 0, 0, 7, 73, 110, 116, 101,
    103, 101, 114, 1, 66, 5, 1, 112, 125, 4, 0, 8, 85, 84, 70, 56, 84, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 1, 1, 64, 2, 4, 115,
    101, 108, 102, 1, 3, 114, 104, 115, 1, 0, 2, 4, 0, 6, 114, 101, 99, 97, 115, 116, 1, 3, 4, 1, 11, 118, 58, 99, 111, 114,
    101, 47, 116, 101, 120, 116, 5, 2, 4, 1, 11, 118, 58, 99, 111, 114, 101, 47, 99, 111, 114, 101, 4, 0, 11, 16, 1, 1, 10,
    118, 58, 99, 111, 114, 101, 47, 119, 105, 116, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115,
    0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45,
    98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 55, 46, 48, 16, 119, 105,
    116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 50,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}

#[derive(Debug)]
pub struct Stub;
impl exports::v::core::number::GuestNatural for Stub {
    fn new_u64(n: u64) -> exports::v::core::number::Natural {
        unreachable!()
    }
    fn add_u64(&self, rhs: u64) -> exports::v::core::number::Natural {
        unreachable!()
    }
    fn add_u64_inplace(&self, rhs: u64) {
        unreachable!()
    }
    fn add_nat(&self, rhs: exports::v::core::number::Natural) -> exports::v::core::number::Natural {
        unreachable!()
    }
    fn add_nat_inplace(&self, rhs: exports::v::core::number::Natural) {
        unreachable!()
    }
}
impl exports::v::core::text::Guest for Stub {
    fn recast(
        self_: exports::v::core::text::Utf8Text,
        rhs: exports::v::core::text::Utf8Text,
    ) -> exports::v::core::number::Integer {
        unreachable!()
    }
}
