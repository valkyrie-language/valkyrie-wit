// Generated by `wit-bindgen` 0.14.0. DO NOT EDIT!
pub mod exports {
    pub mod v {
        pub mod core {

            #[allow(clippy::all)]
            pub mod number {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Sign {
                    NoSign,
                    Positive,
                    Negative,
                }
                impl ::core::fmt::Debug for Sign {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Sign::NoSign => f.debug_tuple("Sign::NoSign").finish(),
                            Sign::Positive => f.debug_tuple("Sign::Positive").finish(),
                            Sign::Negative => f.debug_tuple("Sign::Negative").finish(),
                        }
                    }
                }

                impl Sign {
                    pub(crate) unsafe fn _lift(val: u8) -> Sign {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Sign::NoSign,
                            1 => Sign::Positive,
                            2 => Sign::Negative,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Natural {
                    pub gc: u32,
                }
                impl ::core::fmt::Debug for Natural {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Natural").field("gc", &self.gc).finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Integer {
                    pub sign: Sign,
                    pub natural: Natural,
                }
                impl ::core::fmt::Debug for Integer {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Integer").field("sign", &self.sign).field("natural", &self.natural).finish()
                    }
                }
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#nat-new-u64"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_nat_new_u64(arg0: i64) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::nat_new_u64(arg0 as u64);
                        let Natural { gc: gc1 } = result0;
                        wit_bindgen::rt::as_i32(gc1)
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#nat-add-u64"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_nat_add_u64(arg0: i32, arg1: i64) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::nat_add_u64(Natural { gc: arg0 as u32 }, arg1 as u64);
                        let Natural { gc: gc1 } = result0;
                        wit_bindgen::rt::as_i32(gc1)
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#nat-add-u64-inplace"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_nat_add_u64_inplace(arg0: i32, arg1: i64) {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        <_GuestImpl as Guest>::nat_add_u64_inplace(Natural { gc: arg0 as u32 }, arg1 as u64);
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#nat-add-nat"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_nat_add_nat(arg0: i32, arg1: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 =
                            <_GuestImpl as Guest>::nat_add_nat(Natural { gc: arg0 as u32 }, Natural { gc: arg1 as u32 });
                        let Natural { gc: gc1 } = result0;
                        wit_bindgen::rt::as_i32(gc1)
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#nat-add-nat-inplace"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_nat_add_nat_inplace(arg0: i32, arg1: i32) {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        <_GuestImpl as Guest>::nat_add_nat_inplace(Natural { gc: arg0 as u32 }, Natural { gc: arg1 as u32 });
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#int-add-u64"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_int_add_u64(arg0: i32, arg1: i32, arg2: i64) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::int_add_u64(
                            Integer { sign: Sign::_lift(arg0 as u8), natural: Natural { gc: arg1 as u32 } },
                            arg2 as u64,
                        );
                        let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                        let Integer { sign: sign2, natural: natural2 } = result0;
                        *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
                        let Natural { gc: gc3 } = natural2;
                        *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::as_i32(gc3);
                        ptr1
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#int-add-nat"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_int_add_nat(arg0: i32, arg1: i32, arg2: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::int_add_nat(
                            Integer { sign: Sign::_lift(arg0 as u8), natural: Natural { gc: arg1 as u32 } },
                            Natural { gc: arg2 as u32 },
                        );
                        let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                        let Integer { sign: sign2, natural: natural2 } = result0;
                        *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
                        let Natural { gc: gc3 } = natural2;
                        *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::as_i32(gc3);
                        ptr1
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/number#int-add-int"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_int_add_int(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::int_add_int(
                            Integer { sign: Sign::_lift(arg0 as u8), natural: Natural { gc: arg1 as u32 } },
                            Integer { sign: Sign::_lift(arg2 as u8), natural: Natural { gc: arg3 as u32 } },
                        );
                        let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                        let Integer { sign: sign2, natural: natural2 } = result0;
                        *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
                        let Natural { gc: gc3 } = natural2;
                        *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::as_i32(gc3);
                        ptr1
                    }
                };
                use super::super::super::super::NumberFFI as _GuestImpl;
                pub trait Guest {
                    fn nat_new_u64(n: u64) -> Natural;
                    fn nat_add_u64(this: Natural, rhs: u64) -> Natural;
                    fn nat_add_u64_inplace(this: Natural, rhs: u64);
                    fn nat_add_nat(this: Natural, rhs: Natural) -> Natural;
                    fn nat_add_nat_inplace(this: Natural, rhs: Natural);
                    fn int_add_u64(this: Integer, rhs: u64) -> Integer;
                    fn int_add_nat(this: Integer, rhs: Natural) -> Integer;
                    fn int_add_int(this: Integer, rhs: Integer) -> Integer;
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(4))]
                struct _RetArea([u8; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
            }

            #[allow(clippy::all)]
            pub mod text {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Ascii {
                    pub codepoint: u8,
                }
                impl ::core::fmt::Debug for Ascii {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Ascii").field("codepoint", &self.codepoint).finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Unicode {
                    pub codepoint: u32,
                }
                impl ::core::fmt::Debug for Unicode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Unicode").field("codepoint", &self.codepoint).finish()
                    }
                }
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/text#ascii-add-u8"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_ascii_add_u8(arg0: i32, arg1: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::ascii_add_u8(Ascii { codepoint: arg0 as u8 }, arg1 as u8);
                        let Ascii { codepoint: codepoint1 } = result0;
                        wit_bindgen::rt::as_i32(codepoint1)
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:core/text#unicode-add-u32"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_unicode_add_u32(arg0: i32, arg1: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::unicode_add_u32(Unicode { codepoint: arg0 as u32 }, arg1 as u32);
                        let Unicode { codepoint: codepoint1 } = result0;
                        wit_bindgen::rt::as_i32(codepoint1)
                    }
                };
                use super::super::super::super::TextFFI as _GuestImpl;
                pub trait Guest {
                    fn ascii_add_u8(this: Ascii, rhs: u8) -> Ascii;
                    fn unicode_add_u32(this: Unicode, rhs: u32) -> Unicode;
                }
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:core"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 657] = [
    3, 0, 4, 99, 111, 114, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 153, 4, 1, 65, 2, 1, 65, 4, 1, 66, 22, 1, 109, 3, 7, 110, 111,
    45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115,
    105, 103, 110, 3, 0, 0, 1, 114, 1, 2, 103, 99, 121, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 2, 4, 115,
    105, 103, 110, 1, 7, 110, 97, 116, 117, 114, 97, 108, 3, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 4, 1, 64, 1, 1,
    110, 119, 0, 3, 4, 0, 11, 110, 97, 116, 45, 110, 101, 119, 45, 117, 54, 52, 1, 6, 1, 64, 2, 4, 116, 104, 105, 115, 3, 3,
    114, 104, 115, 119, 0, 3, 4, 0, 11, 110, 97, 116, 45, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 116, 104, 105, 115,
    3, 3, 114, 104, 115, 119, 1, 0, 4, 0, 19, 110, 97, 116, 45, 97, 100, 100, 45, 117, 54, 52, 45, 105, 110, 112, 108, 97, 99,
    101, 1, 8, 1, 64, 2, 4, 116, 104, 105, 115, 3, 3, 114, 104, 115, 3, 0, 3, 4, 0, 11, 110, 97, 116, 45, 97, 100, 100, 45,
    110, 97, 116, 1, 9, 1, 64, 2, 4, 116, 104, 105, 115, 3, 3, 114, 104, 115, 3, 1, 0, 4, 0, 19, 110, 97, 116, 45, 97, 100,
    100, 45, 110, 97, 116, 45, 105, 110, 112, 108, 97, 99, 101, 1, 10, 1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 114, 104, 115,
    119, 0, 5, 4, 0, 11, 105, 110, 116, 45, 97, 100, 100, 45, 117, 54, 52, 1, 11, 1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 114,
    104, 115, 3, 0, 5, 4, 0, 11, 105, 110, 116, 45, 97, 100, 100, 45, 110, 97, 116, 1, 12, 1, 64, 2, 4, 116, 104, 105, 115, 5,
    3, 114, 104, 115, 5, 0, 5, 4, 0, 11, 105, 110, 116, 45, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 1, 13, 118, 58, 99, 111,
    114, 101, 47, 110, 117, 109, 98, 101, 114, 5, 0, 1, 66, 8, 1, 114, 1, 9, 99, 111, 100, 101, 112, 111, 105, 110, 116, 125,
    4, 0, 5, 97, 115, 99, 105, 105, 3, 0, 0, 1, 114, 1, 9, 99, 111, 100, 101, 112, 111, 105, 110, 116, 121, 4, 0, 7, 117, 110,
    105, 99, 111, 100, 101, 3, 0, 2, 1, 64, 2, 4, 116, 104, 105, 115, 1, 3, 114, 104, 115, 125, 0, 1, 4, 0, 12, 97, 115, 99,
    105, 105, 45, 97, 100, 100, 45, 117, 56, 1, 4, 1, 64, 2, 4, 116, 104, 105, 115, 3, 3, 114, 104, 115, 121, 0, 3, 4, 0, 15,
    117, 110, 105, 99, 111, 100, 101, 45, 97, 100, 100, 45, 117, 51, 50, 1, 5, 4, 1, 11, 118, 58, 99, 111, 114, 101, 47, 116,
    101, 120, 116, 5, 1, 4, 1, 11, 118, 58, 99, 111, 114, 101, 47, 99, 111, 114, 101, 4, 0, 11, 10, 1, 0, 4, 99, 111, 114, 101,
    3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117,
    99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109,
    112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114,
    117, 115, 116, 6, 48, 46, 49, 52, 46, 48,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
