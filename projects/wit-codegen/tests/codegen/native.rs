// Generated by `wit-bindgen` 0.13.2. DO NOT EDIT!
#[allow(unused_unsafe, clippy::all)]
pub fn print(msg: &str,){
  
  #[allow(unused_imports)]
  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
  unsafe {
    let vec0 = msg;
    let ptr0 = vec0.as_ptr() as i32;
    let len0 = vec0.len() as i32;
    
    #[cfg(target_arch = "wasm32")]
    #[link(wasm_import_module = "$root")]
    extern "C" {
      #[link_name = "print"]
      fn wit_import(_: i32, _: i32, );
    }
    
    #[cfg(not(target_arch = "wasm32"))]
    fn wit_import(_: i32, _: i32, ){ unreachable!() }
    wit_import(ptr0, len0);
  }
}
pub mod exports {
  pub mod v {
    pub mod native {
      
      #[allow(clippy::all)]
      pub mod my_plugin_api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[repr(C)]
        #[derive(Clone, Copy)]
        pub struct Coord {
          pub x: u32,
          pub y: u32,
        }
        impl ::core::fmt::Debug for Coord {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Coord").field("x", &self.x).field("y", &self.y).finish()
          }
        }
        
        pub use super::super::super::super::ERROR as UseLess;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "v:native/my-plugin-api#[dtor]use-less"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<UseLess>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for UseLess{
          unsafe fn new(rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]v:native/my-plugin-api")]
              extern "C" {
                #[link_name = "[resource-new]use-less"]
                fn new(_: usize) -> u32;
              }
              new(rep)
            }
          }
          
          unsafe fn rep(handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]v:native/my-plugin-api")]
              extern "C" {
                #[link_name = "[resource-rep]use-less"]
                fn rep(_: u32) -> usize;
              }
              rep(handle)
            }
          }
        }
        pub type OwnUseLess = wit_bindgen::rt::Resource<UseLess>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for UseLess{
          #[inline]
          unsafe fn drop(handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]v:native/my-plugin-api")]
              extern "C" {
                #[link_name = "[resource-drop]use-less"]
                fn drop(_: u32);
              }
              
              drop(handle);
            }
          }
        }
        
        #[derive(Clone)]
        pub struct Monster {
          pub name: wit_bindgen::rt::string::String,
          pub hp: u32,
          pub pos: Coord,
        }
        impl ::core::fmt::Debug for Monster {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Monster").field("name", &self.name).field("hp", &self.hp).field("pos", &self.pos).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "v:native/my-plugin-api#get-position"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_position() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_position();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Coord{ x:x2, y:y2, } = result0;
            *((ptr1 + 0) as *mut i32) = wit_bindgen::rt::as_i32(x2);
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::as_i32(y2);
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "v:native/my-plugin-api#set-position"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_set_position(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::set_position(Coord{
              x: arg0 as u32,
              y: arg1 as u32,
            });
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "v:native/my-plugin-api#monsters"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_monsters() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::monsters();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec5 = result0;
            let len5 = vec5.len() as i32;
            let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 20, 4);
            let result5 = if layout5.size() != 0
            {
              let ptr = alloc::alloc(layout5);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout5);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec5.into_iter().enumerate() {
              let base = result5 as i32 + (i as i32) * 20;
              {
                let Monster{ name:name2, hp:hp2, pos:pos2, } = e;
                let vec3 = (name2.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((base + 4) as *mut i32) = len3;
                *((base + 0) as *mut i32) = ptr3;
                *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(hp2);
                let Coord{ x:x4, y:y4, } = pos2;
                *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(x4);
                *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(y4);
              }
            }
            *((ptr1 + 4) as *mut i32) = len5;
            *((ptr1 + 0) as *mut i32) = result5 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_v:native/my-plugin-api#monsters"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_monsters(arg0: i32,) {
              let l2 = *((arg0 + 0) as *const i32);
              let l3 = *((arg0 + 4) as *const i32);
              let base4 = l2;
              let len4 = l3;
              for i in 0..len4 {
                let base = base4 + i *20;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                }
              }
              wit_bindgen::rt::dealloc(base4, (len4 as usize) * 20, 4);
            }
          };
        };
        use super::super::super::super::Host1 as _GuestImpl;
        pub trait Guest {
          fn get_position() -> Coord;
          fn set_position(pos: Coord,);
          fn monsters() -> wit_bindgen::rt::vec::Vec::<Monster>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:native"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 504] = [3, 0, 6, 110, 97, 116, 105, 118, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 246, 2, 1, 65, 4, 1, 66, 12, 1, 114, 2, 1, 120, 121, 1, 121, 121, 4, 0, 5, 99, 111, 111, 114, 100, 3, 0, 0, 4, 0, 8, 117, 115, 101, 45, 108, 101, 115, 115, 3, 1, 1, 114, 3, 4, 110, 97, 109, 101, 115, 2, 104, 112, 121, 3, 112, 111, 115, 1, 4, 0, 7, 109, 111, 110, 115, 116, 101, 114, 3, 0, 3, 1, 64, 0, 0, 1, 4, 0, 12, 103, 101, 116, 45, 112, 111, 115, 105, 116, 105, 111, 110, 1, 5, 1, 64, 1, 3, 112, 111, 115, 1, 1, 0, 4, 0, 12, 115, 101, 116, 45, 112, 111, 115, 105, 116, 105, 111, 110, 1, 6, 1, 112, 4, 1, 64, 0, 0, 7, 4, 0, 8, 109, 111, 110, 115, 116, 101, 114, 115, 1, 8, 4, 1, 22, 118, 58, 110, 97, 116, 105, 118, 101, 47, 109, 121, 45, 112, 108, 117, 103, 105, 110, 45, 97, 112, 105, 5, 0, 1, 65, 4, 1, 64, 1, 3, 109, 115, 103, 115, 1, 0, 3, 0, 5, 112, 114, 105, 110, 116, 1, 0, 1, 66, 12, 1, 114, 2, 1, 120, 121, 1, 121, 121, 4, 0, 5, 99, 111, 111, 114, 100, 3, 0, 0, 4, 0, 8, 117, 115, 101, 45, 108, 101, 115, 115, 3, 1, 1, 114, 3, 4, 110, 97, 109, 101, 115, 2, 104, 112, 121, 3, 112, 111, 115, 1, 4, 0, 7, 109, 111, 110, 115, 116, 101, 114, 3, 0, 3, 1, 64, 0, 0, 1, 4, 0, 12, 103, 101, 116, 45, 112, 111, 115, 105, 116, 105, 111, 110, 1, 5, 1, 64, 1, 3, 112, 111, 115, 1, 1, 0, 4, 0, 12, 115, 101, 116, 45, 112, 111, 115, 105, 116, 105, 111, 110, 1, 6, 1, 112, 4, 1, 64, 0, 0, 7, 4, 0, 8, 109, 111, 110, 115, 116, 101, 114, 115, 1, 8, 4, 1, 22, 118, 58, 110, 97, 116, 105, 118, 101, 47, 109, 121, 45, 112, 108, 117, 103, 105, 110, 45, 97, 112, 105, 5, 1, 4, 1, 15, 118, 58, 110, 97, 116, 105, 118, 101, 47, 110, 97, 116, 105, 118, 101, 4, 1, 11, 18, 1, 1, 12, 118, 58, 110, 97, 116, 105, 118, 101, 47, 119, 105, 116, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 55, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 50];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
