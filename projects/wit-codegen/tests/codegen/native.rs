// Generated by `wit-bindgen` 0.13.2. DO NOT EDIT!
pub mod exports {
    pub mod v {
        pub mod native {

            #[allow(clippy::all)]
            pub mod number {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Sign {}
                impl ::core::fmt::Debug for Sign {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {}
                    }
                }

                impl Sign {
                    pub(crate) unsafe fn _lift(val: u8) -> Sign {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                pub type Natural = wit_bindgen::rt::vec::Vec<u8>;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Integer {
                    pub sign: Sign,
                    pub natural: Sign,
                }
                impl ::core::fmt::Debug for Integer {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Integer").field("sign", &self.sign).field("natural", &self.natural).finish()
                    }
                }
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:native/number#recast"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_recast(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let len1 = arg3 as usize;
                        let result2 = <_GuestImpl as Guest>::recast(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            Vec::from_raw_parts(arg2 as *mut _, len1, len1),
                        );
                        let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                        let Integer { sign: sign4, natural: natural4 } = result2;
                        *((ptr3 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
                        *((ptr3 + 1) as *mut u8) = (natural4.clone() as i32) as u8;
                        ptr3
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:native/number#new"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_new(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let len1 = arg3 as usize;
                        let result2 = <_GuestImpl as Guest>::new(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            Vec::from_raw_parts(arg2 as *mut _, len1, len1),
                        );
                        let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                        let Integer { sign: sign4, natural: natural4 } = result2;
                        *((ptr3 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
                        *((ptr3 + 1) as *mut u8) = (natural4.clone() as i32) as u8;
                        ptr3
                    }
                };
                use super::super::super::super::Host2 as _GuestImpl;
                pub trait Guest {
                    fn recast(self_: Natural, rhs: Natural) -> Integer;
                    fn new(self_: Natural, rhs: Natural) -> Integer;
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(1))]
                struct _RetArea([u8; 2]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 2]);
            }

            #[allow(clippy::all)]
            pub mod text {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                pub type Natural = wit_bindgen::rt::vec::Vec<u8>;
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "v:native/text#recast"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_recast(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let len1 = arg3 as usize;
                        let result2 = <_GuestImpl as Guest>::recast(
                            Vec::from_raw_parts(arg0 as *mut _, len0, len0),
                            Vec::from_raw_parts(arg2 as *mut _, len1, len1),
                        );
                        let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                        let super::super::super::super::exports::v::native::number::Integer { sign: sign4, natural: natural4 } =
                            result2;
                        *((ptr3 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
                        *((ptr3 + 1) as *mut u8) = (natural4.clone() as i32) as u8;
                        ptr3
                    }
                };
                use super::super::super::super::Host1 as _GuestImpl;
                pub trait Guest {
                    fn recast(self_: Natural, rhs: Natural) -> super::super::super::super::exports::v::native::number::Integer;
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(1))]
                struct _RetArea([u8; 2]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 2]);
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:native"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 355] = [
    3, 0, 6, 110, 97, 116, 105, 118, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 225, 1, 1, 65, 2, 1, 65, 5, 1, 66, 9, 1, 109, 0, 4,
    0, 4, 83, 105, 103, 110, 3, 0, 0, 1, 112, 125, 4, 0, 7, 78, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 2, 4, 115, 105,
    103, 110, 1, 7, 110, 97, 116, 117, 114, 97, 108, 1, 4, 0, 7, 73, 110, 116, 101, 103, 101, 114, 3, 0, 4, 1, 64, 2, 4, 115,
    101, 108, 102, 3, 3, 114, 104, 115, 3, 0, 5, 4, 0, 6, 114, 101, 99, 97, 115, 116, 1, 6, 4, 0, 3, 110, 101, 119, 1, 6, 4, 1,
    15, 118, 58, 110, 97, 116, 105, 118, 101, 47, 110, 117, 109, 98, 101, 114, 5, 0, 2, 3, 0, 0, 7, 73, 110, 116, 101, 103,
    101, 114, 1, 66, 5, 1, 112, 125, 4, 0, 7, 78, 97, 116, 117, 114, 97, 108, 3, 0, 0, 2, 3, 2, 1, 1, 1, 64, 2, 4, 115, 101,
    108, 102, 1, 3, 114, 104, 115, 1, 0, 2, 4, 0, 6, 114, 101, 99, 97, 115, 116, 1, 3, 4, 1, 13, 118, 58, 110, 97, 116, 105,
    118, 101, 47, 116, 101, 120, 116, 5, 2, 4, 1, 15, 118, 58, 110, 97, 116, 105, 118, 101, 47, 110, 97, 116, 105, 118, 101, 4,
    0, 11, 18, 1, 1, 12, 118, 58, 110, 97, 116, 105, 118, 101, 47, 119, 105, 116, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97,
    103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111,
    99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46,
    49, 55, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 50,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
