// Generated by `wit-bindgen` 0.13.2. DO NOT EDIT!
pub mod vit {
  pub mod number {
    
    #[allow(clippy::all)]
    pub mod natural {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// unsigned integer buffer
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Natural{
        handle: wit_bindgen::rt::Resource<Natural>,
      }
      
      impl Natural{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Natural{
        #[inline]
        unsafe fn drop(handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[resource-drop]natural"]
              fn drop(_: u32);
            }
            
            drop(handle);
          }
        }
      }
      
      impl Natural {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(init: &[u32],) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let vec0 = init;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[constructor]natural"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr0, len0);
            Natural::from_handle(ret as u32)
          }
        }
      }
      impl Natural {
        #[allow(unused_unsafe, clippy::all)]
        pub fn zero() -> Natural{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[static]natural.zero"]
              fn wit_import() -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import() -> i32{ unreachable!() }
            let ret = wit_import();
            Natural::from_handle(ret as u32)
          }
        }
      }
      impl Natural {
        #[allow(unused_unsafe, clippy::all)]
        pub fn one() -> Natural{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[static]natural.one"]
              fn wit_import() -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import() -> i32{ unreachable!() }
            let ret = wit_import();
            Natural::from_handle(ret as u32)
          }
        }
      }
      impl Natural {
        #[allow(unused_unsafe, clippy::all)]
        pub fn add_u32(&self,rhs: u32,) -> Natural{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[method]natural.add-u32"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(rhs));
            Natural::from_handle(ret as u32)
          }
        }
      }
      impl Natural {
        #[allow(unused_unsafe, clippy::all)]
        pub fn add_u64(&self,rhs: u64,) -> Natural{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[method]natural.add-u64"]
              fn wit_import(_: i32, _: i64, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(rhs));
            Natural::from_handle(ret as u32)
          }
        }
      }
      impl Natural {
        #[allow(unused_unsafe, clippy::all)]
        pub fn add_nat(&self,rhs: &Natural,) -> Natural{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:number/natural")]
            extern "C" {
              #[link_name = "[method]natural.add-nat"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32, (rhs).handle() as i32);
            Natural::from_handle(ret as u32)
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod integer {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Natural = super::super::super::vit::number::natural::Natural;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum Sign {
        UnSign,
        Positive,
        Negative,
      }
      impl ::core::fmt::Debug for Sign {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Sign::UnSign => {
              f.debug_tuple("Sign::UnSign").finish()
            }
            Sign::Positive => {
              f.debug_tuple("Sign::Positive").finish()
            }
            Sign::Negative => {
              f.debug_tuple("Sign::Negative").finish()
            }
          }
        }
      }
      
      impl Sign{
        pub(crate) unsafe fn _lift(val: u8) -> Sign{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => Sign::UnSign,
            1 => Sign::Positive,
            2 => Sign::Negative,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      pub struct Integer {
        pub sign: Sign,
        pub natural: Natural,
      }
      impl ::core::fmt::Debug for Integer {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Integer").field("sign", &self.sign).field("natural", &self.natural).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_u32(self_: Integer,rhs: u32,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "add-u32"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i32(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_u64(self_: Integer,rhs: u64,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "add-u64"]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i64(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_nat(self_: Integer,rhs: &Natural,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "add-nat"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, (rhs).handle() as i32, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_i32(self_: Integer,rhs: i32,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "add-i32"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i32(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_i64(self_: Integer,rhs: i64,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "add-i64"]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i64(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_int(self_: Integer,rhs: Integer,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let Integer{ sign:sign1, natural:natural1, } = rhs;
          let ptr2 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "add-int"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, sign1.clone() as i32, (natural1).into_handle() as i32, ptr2);
          let l3 = i32::from(*((ptr2 + 0) as *const u8));
          let l4 = *((ptr2 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l3 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l4 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn sub_u32(self_: Integer,rhs: u32,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "sub-u32"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i32(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn sub_u64(self_: Integer,rhs: u64,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "sub-u64"]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i64(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn sub_nat(self_: Integer,rhs: &Natural,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "sub-nat"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, (rhs).handle() as i32, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn sub_i32(self_: Integer,rhs: i32,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "sub-i32"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i32(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn sub_i64(self_: Integer,rhs: i64,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "sub-i64"]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, wit_bindgen::rt::as_i64(rhs), ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l2 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn sub_int(self_: Integer,rhs: Integer,) -> Integer{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Integer{ sign:sign0, natural:natural0, } = self_;
          let Integer{ sign:sign1, natural:natural1, } = rhs;
          let ptr2 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/integer")]
          extern "C" {
            #[link_name = "sub-int"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, sign1.clone() as i32, (natural1).into_handle() as i32, ptr2);
          let l3 = i32::from(*((ptr2 + 0) as *const u8));
          let l4 = *((ptr2 + 4) as *const i32);
          Integer{
            sign: Sign::_lift(l3 as u8),
            natural: super::super::super::vit::number::natural::Natural::from_handle(l4 as u32),
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod ordinal {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Integer = super::super::super::vit::number::integer::Integer;
      pub type Natural = super::super::super::vit::number::integer::Natural;
      pub struct Ordinal {
        pub integer: Integer,
      }
      impl ::core::fmt::Debug for Ordinal {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Ordinal").field("integer", &self.integer).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn new(integer: Integer,) -> Option<Ordinal>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let super::super::super::vit::number::integer::Integer{ sign:sign0, natural:natural0, } = integer;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/ordinal")]
          extern "C" {
            #[link_name = "new"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          match l2 {
            0 => None,
            1 => {
              let e = {
                let l3 = i32::from(*((ptr1 + 4) as *const u8));
                let l4 = *((ptr1 + 8) as *const i32);
                
                Ordinal{
                  integer: super::super::super::vit::number::integer::Integer{
                    sign: super::super::super::vit::number::integer::Sign::_lift(l3 as u8),
                    natural: super::super::super::vit::number::natural::Natural::from_handle(l4 as u32),
                  },
                }
              };
              Some(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn uncheck_new(integer: Integer,) -> Ordinal{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let super::super::super::vit::number::integer::Integer{ sign:sign0, natural:natural0, } = integer;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "vit:number/ordinal")]
          extern "C" {
            #[link_name = "uncheck-new"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(sign0.clone() as i32, (natural0).into_handle() as i32, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          let l3 = *((ptr1 + 4) as *const i32);
          Ordinal{
            integer: super::super::super::vit::number::integer::Integer{
              sign: super::super::super::vit::number::integer::Sign::_lift(l2 as u8),
              natural: super::super::super::vit::number::natural::Natural::from_handle(l3 as u32),
            },
          }
        }
      }
      
    }
    
  }
  pub mod text {
    
    #[allow(clippy::all)]
    pub mod ascii {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Ascii {
        pub codepoint: u8,
      }
      impl ::core::fmt::Debug for Ascii {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Ascii").field("codepoint", &self.codepoint).finish()
        }
      }
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct AsciiText{
        handle: wit_bindgen::rt::Resource<AsciiText>,
      }
      
      impl AsciiText{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for AsciiText{
        #[inline]
        unsafe fn drop(handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "vit:text/ascii")]
            extern "C" {
              #[link_name = "[resource-drop]ascii-text"]
              fn drop(_: u32);
            }
            
            drop(handle);
          }
        }
      }
      
      impl AsciiText {
        #[allow(unused_unsafe, clippy::all)]
        pub fn get_char_offset(&self,offset: u64,) -> Option<Ascii>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "vit:text/ascii")]
            extern "C" {
              #[link_name = "[method]ascii-text.get-char-offset"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(offset), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => None,
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  Ascii{
                    codepoint: l2 as u8,
                  }
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod vit {
    pub mod number {
      
      #[allow(clippy::all)]
      pub mod natural {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        /// unsigned integer buffer
        
        pub use super::super::super::super::Host1 as Natural;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[dtor]natural"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<Natural>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for Natural{
          unsafe fn new(rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]vit:number/natural")]
              extern "C" {
                #[link_name = "[resource-new]natural"]
                fn new(_: usize) -> u32;
              }
              new(rep)
            }
          }
          
          unsafe fn rep(handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]vit:number/natural")]
              extern "C" {
                #[link_name = "[resource-rep]natural"]
                fn rep(_: u32) -> usize;
              }
              rep(handle)
            }
          }
        }
        pub type OwnNatural = wit_bindgen::rt::Resource<Natural>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for Natural{
          #[inline]
          unsafe fn drop(handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]vit:number/natural")]
              extern "C" {
                #[link_name = "[resource-drop]natural"]
                fn drop(_: u32);
              }
              
              drop(handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[constructor]natural"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_constructor_natural(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let result1 = OwnNatural::new(<_NaturalImpl as GuestNatural>::new(Vec::from_raw_parts(arg0 as *mut _, len0, len0)));
            wit_bindgen::rt::Resource::into_handle(result1) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[static]natural.zero"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_static_natural_zero() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_NaturalImpl as GuestNatural>::zero();
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[static]natural.one"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_static_natural_one() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_NaturalImpl as GuestNatural>::one();
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[method]natural.add-u32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_natural_add_u32(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_NaturalImpl as GuestNatural>::add_u32(&*(arg0 as u32 as usize as *const Natural), arg1 as u32);
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[method]natural.add-u64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_natural_add_u64(arg0: i32,arg1: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_NaturalImpl as GuestNatural>::add_u64(&*(arg0 as u32 as usize as *const Natural), arg1 as u64);
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/natural#[method]natural.add-nat"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_natural_add_nat(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_NaturalImpl as GuestNatural>::add_nat(&*(arg0 as u32 as usize as *const Natural), &*(arg1 as u32 as usize as *const Natural));
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        use super::super::super::super::Host1 as _NaturalImpl;
        pub trait GuestNatural {
          fn new(init: wit_bindgen::rt::vec::Vec::<u32>,) -> Self;
          fn zero() -> OwnNatural;
          fn one() -> OwnNatural;
          fn add_u32(&self,rhs: u32,) -> OwnNatural;
          fn add_u64(&self,rhs: u64,) -> OwnNatural;
          fn add_nat(&self,rhs: &Natural,) -> OwnNatural;
        }
        
      }
      
      
      #[allow(clippy::all)]
      pub mod integer {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type OwnNatural = super::super::super::super::exports::vit::number::natural::OwnNatural;
        pub type Natural = super::super::super::super::exports::vit::number::natural::Natural;
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum Sign {
          UnSign,
          Positive,
          Negative,
        }
        impl ::core::fmt::Debug for Sign {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              Sign::UnSign => {
                f.debug_tuple("Sign::UnSign").finish()
              }
              Sign::Positive => {
                f.debug_tuple("Sign::Positive").finish()
              }
              Sign::Negative => {
                f.debug_tuple("Sign::Negative").finish()
              }
            }
          }
        }
        
        impl Sign{
          pub(crate) unsafe fn _lift(val: u8) -> Sign{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => Sign::UnSign,
              1 => Sign::Positive,
              2 => Sign::Negative,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        pub struct Integer {
          pub sign: Sign,
          pub natural: OwnNatural,
        }
        impl ::core::fmt::Debug for Integer {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Integer").field("sign", &self.sign).field("natural", &self.natural).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#add-u32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_u32(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_u32(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2 as u32);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#add-u64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_u64(arg0: i32,arg1: i32,arg2: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_u64(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2 as u64);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#add-nat"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_nat(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_nat(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, &*(arg2 as u32 as usize as *const Natural));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#add-i32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_i32(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_i32(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#add-i64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_i64(arg0: i32,arg1: i32,arg2: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_i64(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#add-int"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_int(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_int(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, Integer{
              sign: Sign::_lift(arg2 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg3 as u32),
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#sub-u32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_u32(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_u32(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2 as u32);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#sub-u64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_u64(arg0: i32,arg1: i32,arg2: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_u64(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2 as u64);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#sub-nat"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_nat(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_nat(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, &*(arg2 as u32 as usize as *const Natural));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#sub-i32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_i32(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_i32(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#sub-i64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_i64(arg0: i32,arg1: i32,arg2: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_i64(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, arg2);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/integer#sub-int"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_int(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_int(Integer{
              sign: Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            }, Integer{
              sign: Sign::_lift(arg2 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg3 as u32),
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Integer{ sign:sign2, natural:natural2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural2) as i32;
            ptr1
          }
        };
        use super::super::super::super::Host3 as _GuestImpl;
        pub trait Guest {
          fn add_u32(self_: Integer,rhs: u32,) -> Integer;
          fn add_u64(self_: Integer,rhs: u64,) -> Integer;
          fn add_nat(self_: Integer,rhs: &Natural,) -> Integer;
          fn add_i32(self_: Integer,rhs: i32,) -> Integer;
          fn add_i64(self_: Integer,rhs: i64,) -> Integer;
          fn add_int(self_: Integer,rhs: Integer,) -> Integer;
          fn sub_u32(self_: Integer,rhs: u32,) -> Integer;
          fn sub_u64(self_: Integer,rhs: u64,) -> Integer;
          fn sub_nat(self_: Integer,rhs: &Natural,) -> Integer;
          fn sub_i32(self_: Integer,rhs: i32,) -> Integer;
          fn sub_i64(self_: Integer,rhs: i64,) -> Integer;
          fn sub_int(self_: Integer,rhs: Integer,) -> Integer;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
      
      #[allow(clippy::all)]
      pub mod ordinal {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Integer = super::super::super::super::exports::vit::number::integer::Integer;
        pub type OwnNatural = super::super::super::super::exports::vit::number::natural::OwnNatural;
        pub type Natural = super::super::super::super::exports::vit::number::natural::Natural;
        pub struct Ordinal {
          pub integer: Integer,
        }
        impl ::core::fmt::Debug for Ordinal {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Ordinal").field("integer", &self.integer).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/ordinal#new"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_new(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::new(super::super::super::super::exports::vit::number::integer::Integer{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Some(e) => {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let Ordinal{ integer:integer2, } = e;
                let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign3, natural:natural3, } = integer2;
                *((ptr1 + 4) as *mut u8) = (sign3.clone() as i32) as u8;
                *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural3) as i32;
              },
              None => {
                {
                  *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/ordinal#uncheck-new"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_uncheck_new(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::uncheck_new(super::super::super::super::exports::vit::number::integer::Integer{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Ordinal{ integer:integer2, } = result0;
            let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign3, natural:natural3, } = integer2;
            *((ptr1 + 0) as *mut u8) = (sign3.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural3) as i32;
            ptr1
          }
        };
        use super::super::super::super::Host4 as _GuestImpl;
        pub trait Guest {
          fn new(integer: Integer,) -> Option<Ordinal>;
          fn uncheck_new(integer: Integer,) -> Ordinal;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
      
      #[allow(clippy::all)]
      pub mod decimal {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        /// unsigned integer buffer
        #[derive(Clone)]
        pub struct Decimal {
          pub x: wit_bindgen::rt::vec::Vec::<u32>,
        }
        impl ::core::fmt::Debug for Decimal {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Decimal").field("x", &self.x).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/decimal#add-f32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_f32(arg0: i32,arg1: i32,arg2: f32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let result1 = <_GuestImpl as Guest>::add_f32(Decimal{
              x: Vec::from_raw_parts(arg0 as *mut _, len0, len0),
            }, arg2);
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            let Decimal{ x:x3, } = result1;
            let vec4 = (x3).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr2 + 4) as *mut i32) = len4;
            *((ptr2 + 0) as *mut i32) = ptr4;
            ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_vit:number/decimal#add-f32"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_add_f32(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              let base2 = l0;
              let len2 = l1;
              wit_bindgen::rt::dealloc(base2, (len2 as usize) * 4, 4);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/decimal#add-f64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_f64(arg0: i32,arg1: i32,arg2: f64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let result1 = <_GuestImpl as Guest>::add_f64(Decimal{
              x: Vec::from_raw_parts(arg0 as *mut _, len0, len0),
            }, arg2);
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            let Decimal{ x:x3, } = result1;
            let vec4 = (x3).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr2 + 4) as *mut i32) = len4;
            *((ptr2 + 0) as *mut i32) = ptr4;
            ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_vit:number/decimal#add-f64"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_add_f64(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              let base2 = l0;
              let len2 = l1;
              wit_bindgen::rt::dealloc(base2, (len2 as usize) * 4, 4);
            }
          };
        };
        use super::super::super::super::Host5 as _GuestImpl;
        pub trait Guest {
          fn add_f32(self_: Decimal,rhs: f32,) -> Decimal;
          fn add_f64(self_: Decimal,rhs: f64,) -> Decimal;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
      
      #[allow(clippy::all)]
      pub mod fraction {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Sign = super::super::super::super::exports::vit::number::integer::Sign;
        pub type OwnNatural = super::super::super::super::exports::vit::number::natural::OwnNatural;
        pub type Natural = super::super::super::super::exports::vit::number::natural::Natural;
        pub type Integer = super::super::super::super::exports::vit::number::integer::Integer;
        pub struct Fraction {
          pub sign: Sign,
          pub numerator: OwnNatural,
          pub denominator: OwnNatural,
        }
        impl ::core::fmt::Debug for Fraction {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Fraction").field("sign", &self.sign).field("numerator", &self.numerator).field("denominator", &self.denominator).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#add-u32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_u32(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_u32(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3 as u32);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#add-u64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_u64(arg0: i32,arg1: i32,arg2: i32,arg3: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_u64(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3 as u64);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#add-nat"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_nat(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_nat(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, &*(arg3 as u32 as usize as *const Natural));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#add-i32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_i32(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_i32(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#add-i64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_i64(arg0: i32,arg1: i32,arg2: i32,arg3: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_i64(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#add-int"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_int(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::add_int(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, super::super::super::super::exports::vit::number::integer::Integer{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg3 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg4 as u32),
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#sub-u32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_u32(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_u32(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3 as u32);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#sub-u64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_u64(arg0: i32,arg1: i32,arg2: i32,arg3: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_u64(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3 as u64);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#sub-nat"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_nat(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_nat(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, &*(arg3 as u32 as usize as *const Natural));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#sub-i32"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_i32(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_i32(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#sub-i64"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_i64(arg0: i32,arg1: i32,arg2: i32,arg3: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_i64(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, arg3);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/fraction#sub-int"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sub_int(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::sub_int(Fraction{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
              numerator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              denominator: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg2 as u32),
            }, super::super::super::super::exports::vit::number::integer::Integer{
              sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg3 as u8),
              natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg4 as u32),
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Fraction{ sign:sign2, numerator:numerator2, denominator:denominator2, } = result0;
            *((ptr1 + 0) as *mut u8) = (sign2.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(numerator2) as i32;
            *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::Resource::into_handle(denominator2) as i32;
            ptr1
          }
        };
        use super::super::super::super::Host6 as _GuestImpl;
        pub trait Guest {
          fn add_u32(self_: Fraction,rhs: u32,) -> Fraction;
          fn add_u64(self_: Fraction,rhs: u64,) -> Fraction;
          fn add_nat(self_: Fraction,rhs: &Natural,) -> Fraction;
          fn add_i32(self_: Fraction,rhs: i32,) -> Fraction;
          fn add_i64(self_: Fraction,rhs: i64,) -> Fraction;
          fn add_int(self_: Fraction,rhs: Integer,) -> Fraction;
          fn sub_u32(self_: Fraction,rhs: u32,) -> Fraction;
          fn sub_u64(self_: Fraction,rhs: u64,) -> Fraction;
          fn sub_nat(self_: Fraction,rhs: &Natural,) -> Fraction;
          fn sub_i32(self_: Fraction,rhs: i32,) -> Fraction;
          fn sub_i64(self_: Fraction,rhs: i64,) -> Fraction;
          fn sub_int(self_: Fraction,rhs: Integer,) -> Fraction;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
      
      #[allow(clippy::all)]
      pub mod prime {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Ordinal = super::super::super::super::exports::vit::number::ordinal::Ordinal;
        pub type OwnNatural = super::super::super::super::exports::vit::number::natural::OwnNatural;
        pub type Natural = super::super::super::super::exports::vit::number::natural::Natural;
        /// unsigned integer buffer
        pub struct Prime {
          pub ordinal: Ordinal,
        }
        impl ::core::fmt::Debug for Prime {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Prime").field("ordinal", &self.ordinal).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/prime#new"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_new(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::new(super::super::super::super::exports::vit::number::ordinal::Ordinal{
              integer: super::super::super::super::exports::vit::number::integer::Integer{
                sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
                natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
              },
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Prime{ ordinal:ordinal2, } = result0;
            let super::super::super::super::exports::vit::number::ordinal::Ordinal{ integer:integer3, } = ordinal2;
            let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign4, natural:natural4, } = integer3;
            *((ptr1 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural4) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/prime#check-nat"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_check_nat(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::check_nat(super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg0 as u32));
            match result0 { true => 1, false => 0 }
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/prime#iter-next"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_iter_next(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::iter_next(Prime{
              ordinal: super::super::super::super::exports::vit::number::ordinal::Ordinal{
                integer: super::super::super::super::exports::vit::number::integer::Integer{
                  sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
                  natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
                },
              },
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Prime{ ordinal:ordinal2, } = result0;
            let super::super::super::super::exports::vit::number::ordinal::Ordinal{ integer:integer3, } = ordinal2;
            let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign4, natural:natural4, } = integer3;
            *((ptr1 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural4) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/prime#iter-prev"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_iter_prev(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::iter_prev(Prime{
              ordinal: super::super::super::super::exports::vit::number::ordinal::Ordinal{
                integer: super::super::super::super::exports::vit::number::integer::Integer{
                  sign: super::super::super::super::exports::vit::number::integer::Sign::_lift(arg0 as u8),
                  natural: super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg1 as u32),
                },
              },
            });
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Prime{ ordinal:ordinal2, } = result0;
            let super::super::super::super::exports::vit::number::ordinal::Ordinal{ integer:integer3, } = ordinal2;
            let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign4, natural:natural4, } = integer3;
            *((ptr1 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural4) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/prime#around-prev"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_around_prev(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::around_prev(super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg0 as u32));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Prime{ ordinal:ordinal2, } = result0;
            let super::super::super::super::exports::vit::number::ordinal::Ordinal{ integer:integer3, } = ordinal2;
            let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign4, natural:natural4, } = integer3;
            *((ptr1 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural4) as i32;
            ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "vit:number/prime#around-next"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_around_next(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::around_next(super::super::super::super::exports::vit::number::natural::OwnNatural::from_handle(arg0 as u32));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Prime{ ordinal:ordinal2, } = result0;
            let super::super::super::super::exports::vit::number::ordinal::Ordinal{ integer:integer3, } = ordinal2;
            let super::super::super::super::exports::vit::number::integer::Integer{ sign:sign4, natural:natural4, } = integer3;
            *((ptr1 + 0) as *mut u8) = (sign4.clone() as i32) as u8;
            *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(natural4) as i32;
            ptr1
          }
        };
        use super::super::super::super::Host7 as _GuestImpl;
        pub trait Guest {
          fn new(ordinal: Ordinal,) -> Prime;
          fn check_nat(n: OwnNatural,) -> bool;
          fn iter_next(self_: Prime,) -> Prime;
          fn iter_prev(self_: Prime,) -> Prime;
          fn around_prev(n: OwnNatural,) -> Prime;
          fn around_next(n: OwnNatural,) -> Prime;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:number-ffi"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 7440] = [3, 0, 10, 110, 117, 109, 98, 101, 114, 45, 102, 102, 105, 0, 97, 115, 109, 13, 0, 1, 0, 7, 180, 55, 1, 65, 28, 1, 66, 7, 1, 112, 121, 1, 114, 1, 1, 120, 0, 4, 0, 7, 100, 101, 99, 105, 109, 97, 108, 3, 0, 1, 1, 64, 2, 4, 115, 101, 108, 102, 2, 3, 114, 104, 115, 118, 0, 2, 4, 0, 7, 97, 100, 100, 45, 102, 51, 50, 1, 3, 1, 64, 2, 4, 115, 101, 108, 102, 2, 3, 114, 104, 115, 117, 0, 2, 4, 0, 7, 97, 100, 100, 45, 102, 54, 52, 1, 4, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 100, 101, 99, 105, 109, 97, 108, 5, 0, 1, 66, 15, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 1, 1, 112, 121, 1, 105, 0, 1, 64, 1, 4, 105, 110, 105, 116, 1, 0, 2, 4, 0, 20, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 110, 97, 116, 117, 114, 97, 108, 1, 3, 1, 64, 0, 0, 2, 4, 0, 20, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 122, 101, 114, 111, 1, 4, 4, 0, 19, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 111, 110, 101, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 121, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 51, 50, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 119, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 5, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 110, 97, 116, 1, 8, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 97, 116, 117, 114, 97, 108, 5, 1, 2, 3, 0, 1, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 26, 2, 3, 2, 1, 2, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 0, 1, 109, 3, 7, 117, 110, 45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115, 105, 103, 110, 3, 0, 2, 1, 105, 1, 1, 114, 2, 4, 115, 105, 103, 110, 3, 7, 110, 97, 116, 117, 114, 97, 108, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 5, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 121, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 119, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 8, 1, 104, 1, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 9, 0, 6, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 10, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 122, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 11, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 120, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 6, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 7, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 8, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 10, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 11, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 13, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 5, 3, 2, 3, 0, 2, 4, 115, 105, 103, 110, 2, 3, 0, 2, 7, 110, 97, 116, 117, 114, 97, 108, 2, 3, 0, 2, 7, 105, 110, 116, 101, 103, 101, 114, 1, 66, 28, 2, 3, 2, 1, 4, 4, 0, 4, 115, 105, 103, 110, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 2, 3, 2, 1, 6, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 4, 1, 105, 3, 1, 114, 3, 4, 115, 105, 103, 110, 1, 9, 110, 117, 109, 101, 114, 97, 116, 111, 114, 6, 11, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 6, 4, 0, 8, 102, 114, 97, 99, 116, 105, 111, 110, 3, 0, 7, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 121, 0, 8, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 9, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 119, 0, 8, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 10, 1, 104, 3, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 11, 0, 8, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 122, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 120, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 14, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 5, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 15, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 9, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 10, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 13, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 14, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 15, 4, 1, 19, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 102, 114, 97, 99, 116, 105, 111, 110, 5, 7, 1, 66, 11, 2, 3, 2, 1, 6, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 4, 1, 107, 5, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 6, 4, 0, 3, 110, 101, 119, 1, 7, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 5, 4, 0, 11, 117, 110, 99, 104, 101, 99, 107, 45, 110, 101, 119, 1, 8, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 111, 114, 100, 105, 110, 97, 108, 5, 8, 2, 3, 0, 4, 7, 111, 114, 100, 105, 110, 97, 108, 2, 3, 0, 4, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 17, 2, 3, 2, 1, 9, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 0, 2, 3, 2, 1, 10, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 111, 114, 100, 105, 110, 97, 108, 1, 4, 0, 5, 112, 114, 105, 109, 101, 3, 0, 4, 1, 64, 1, 7, 111, 114, 100, 105, 110, 97, 108, 1, 0, 5, 4, 0, 3, 110, 101, 119, 1, 6, 1, 105, 3, 1, 64, 1, 1, 110, 7, 0, 127, 4, 0, 9, 99, 104, 101, 99, 107, 45, 110, 97, 116, 1, 8, 1, 64, 1, 4, 115, 101, 108, 102, 5, 0, 5, 4, 0, 9, 105, 116, 101, 114, 45, 110, 101, 120, 116, 1, 9, 4, 0, 9, 105, 116, 101, 114, 45, 112, 114, 101, 118, 1, 9, 1, 64, 1, 1, 110, 7, 0, 5, 4, 0, 11, 97, 114, 111, 117, 110, 100, 45, 112, 114, 101, 118, 1, 10, 4, 0, 11, 97, 114, 111, 117, 110, 100, 45, 110, 101, 120, 116, 1, 10, 4, 1, 16, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 112, 114, 105, 109, 101, 5, 11, 1, 65, 2, 1, 66, 7, 1, 112, 121, 1, 114, 1, 1, 120, 0, 4, 0, 7, 100, 101, 99, 105, 109, 97, 108, 3, 0, 1, 1, 64, 2, 4, 115, 101, 108, 102, 2, 3, 114, 104, 115, 118, 0, 2, 4, 0, 7, 97, 100, 100, 45, 102, 51, 50, 1, 3, 1, 64, 2, 4, 115, 101, 108, 102, 2, 3, 114, 104, 115, 117, 0, 2, 4, 0, 7, 97, 100, 100, 45, 102, 54, 52, 1, 4, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 100, 101, 99, 105, 109, 97, 108, 5, 0, 4, 1, 22, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 100, 101, 99, 105, 109, 97, 108, 45, 102, 102, 105, 4, 12, 1, 65, 10, 1, 66, 15, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 1, 1, 112, 121, 1, 105, 0, 1, 64, 1, 4, 105, 110, 105, 116, 1, 0, 2, 4, 0, 20, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 110, 97, 116, 117, 114, 97, 108, 1, 3, 1, 64, 0, 0, 2, 4, 0, 20, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 122, 101, 114, 111, 1, 4, 4, 0, 19, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 111, 110, 101, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 121, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 51, 50, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 119, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 5, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 110, 97, 116, 1, 8, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 97, 116, 117, 114, 97, 108, 5, 0, 2, 3, 0, 0, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 26, 2, 3, 2, 1, 1, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 0, 1, 109, 3, 7, 117, 110, 45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115, 105, 103, 110, 3, 0, 2, 1, 105, 1, 1, 114, 2, 4, 115, 105, 103, 110, 3, 7, 110, 97, 116, 117, 114, 97, 108, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 5, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 121, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 119, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 8, 1, 104, 1, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 9, 0, 6, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 10, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 122, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 11, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 120, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 6, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 7, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 8, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 10, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 11, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 13, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 5, 2, 2, 3, 0, 1, 4, 115, 105, 103, 110, 2, 3, 0, 1, 7, 110, 97, 116, 117, 114, 97, 108, 2, 3, 0, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 66, 28, 2, 3, 2, 1, 3, 4, 0, 4, 115, 105, 103, 110, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 2, 3, 2, 1, 5, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 4, 1, 105, 3, 1, 114, 3, 4, 115, 105, 103, 110, 1, 9, 110, 117, 109, 101, 114, 97, 116, 111, 114, 6, 11, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 6, 4, 0, 8, 102, 114, 97, 99, 116, 105, 111, 110, 3, 0, 7, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 121, 0, 8, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 9, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 119, 0, 8, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 10, 1, 104, 3, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 11, 0, 8, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 122, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 120, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 14, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 5, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 15, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 9, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 10, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 13, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 14, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 15, 4, 1, 19, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 102, 114, 97, 99, 116, 105, 111, 110, 5, 6, 4, 1, 23, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 102, 114, 97, 99, 116, 105, 111, 110, 45, 102, 102, 105, 4, 13, 1, 65, 9, 1, 66, 15, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 1, 1, 112, 121, 1, 105, 0, 1, 64, 1, 4, 105, 110, 105, 116, 1, 0, 2, 4, 0, 20, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 110, 97, 116, 117, 114, 97, 108, 1, 3, 1, 64, 0, 0, 2, 4, 0, 20, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 122, 101, 114, 111, 1, 4, 4, 0, 19, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 111, 110, 101, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 121, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 51, 50, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 119, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 5, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 110, 97, 116, 1, 8, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 97, 116, 117, 114, 97, 108, 5, 0, 2, 3, 0, 0, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 26, 2, 3, 2, 1, 1, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 0, 1, 109, 3, 7, 117, 110, 45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115, 105, 103, 110, 3, 0, 2, 1, 105, 1, 1, 114, 2, 4, 115, 105, 103, 110, 3, 7, 110, 97, 116, 117, 114, 97, 108, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 5, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 121, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 119, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 8, 1, 104, 1, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 9, 0, 6, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 10, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 122, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 11, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 120, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 6, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 7, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 8, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 10, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 11, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 13, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 5, 2, 2, 3, 0, 1, 7, 105, 110, 116, 101, 103, 101, 114, 2, 3, 0, 1, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 11, 2, 3, 2, 1, 3, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 4, 1, 107, 5, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 6, 4, 0, 3, 110, 101, 119, 1, 7, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 5, 4, 0, 11, 117, 110, 99, 104, 101, 99, 107, 45, 110, 101, 119, 1, 8, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 111, 114, 100, 105, 110, 97, 108, 5, 5, 4, 1, 22, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 45, 102, 102, 105, 4, 14, 1, 65, 13, 1, 66, 15, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 1, 1, 112, 121, 1, 105, 0, 1, 64, 1, 4, 105, 110, 105, 116, 1, 0, 2, 4, 0, 20, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 110, 97, 116, 117, 114, 97, 108, 1, 3, 1, 64, 0, 0, 2, 4, 0, 20, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 122, 101, 114, 111, 1, 4, 4, 0, 19, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 111, 110, 101, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 121, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 51, 50, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 119, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 5, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 110, 97, 116, 1, 8, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 97, 116, 117, 114, 97, 108, 5, 0, 2, 3, 0, 0, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 26, 2, 3, 2, 1, 1, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 0, 1, 109, 3, 7, 117, 110, 45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115, 105, 103, 110, 3, 0, 2, 1, 105, 1, 1, 114, 2, 4, 115, 105, 103, 110, 3, 7, 110, 97, 116, 117, 114, 97, 108, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 5, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 121, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 119, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 8, 1, 104, 1, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 9, 0, 6, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 10, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 122, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 11, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 120, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 6, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 7, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 8, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 10, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 11, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 13, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 5, 2, 2, 3, 0, 1, 7, 105, 110, 116, 101, 103, 101, 114, 2, 3, 0, 1, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 11, 2, 3, 2, 1, 3, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 4, 1, 107, 5, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 6, 4, 0, 3, 110, 101, 119, 1, 7, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 5, 4, 0, 11, 117, 110, 99, 104, 101, 99, 107, 45, 110, 101, 119, 1, 8, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 111, 114, 100, 105, 110, 97, 108, 5, 5, 2, 3, 0, 2, 7, 111, 114, 100, 105, 110, 97, 108, 2, 3, 0, 2, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 17, 2, 3, 2, 1, 6, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 111, 114, 100, 105, 110, 97, 108, 1, 4, 0, 5, 112, 114, 105, 109, 101, 3, 0, 4, 1, 64, 1, 7, 111, 114, 100, 105, 110, 97, 108, 1, 0, 5, 4, 0, 3, 110, 101, 119, 1, 6, 1, 105, 3, 1, 64, 1, 1, 110, 7, 0, 127, 4, 0, 9, 99, 104, 101, 99, 107, 45, 110, 97, 116, 1, 8, 1, 64, 1, 4, 115, 101, 108, 102, 5, 0, 5, 4, 0, 9, 105, 116, 101, 114, 45, 110, 101, 120, 116, 1, 9, 4, 0, 9, 105, 116, 101, 114, 45, 112, 114, 101, 118, 1, 9, 1, 64, 1, 1, 110, 7, 0, 5, 4, 0, 11, 97, 114, 111, 117, 110, 100, 45, 112, 114, 101, 118, 1, 10, 4, 0, 11, 97, 114, 111, 117, 110, 100, 45, 110, 101, 120, 116, 1, 10, 4, 1, 16, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 112, 114, 105, 109, 101, 5, 8, 4, 1, 20, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 112, 114, 105, 109, 101, 45, 102, 102, 105, 4, 15, 1, 65, 26, 1, 66, 7, 1, 114, 1, 9, 99, 111, 100, 101, 112, 111, 105, 110, 116, 125, 4, 0, 5, 97, 115, 99, 105, 105, 3, 0, 0, 4, 0, 10, 97, 115, 99, 105, 105, 45, 116, 101, 120, 116, 3, 1, 1, 104, 2, 1, 107, 1, 1, 64, 2, 4, 115, 101, 108, 102, 3, 6, 111, 102, 102, 115, 101, 116, 119, 0, 4, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 97, 115, 99, 105, 105, 45, 116, 101, 120, 116, 46, 103, 101, 116, 45, 99, 104, 97, 114, 45, 111, 102, 102, 115, 101, 116, 1, 5, 3, 1, 14, 118, 105, 116, 58, 116, 101, 120, 116, 47, 97, 115, 99, 105, 105, 5, 0, 1, 66, 15, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 1, 1, 112, 121, 1, 105, 0, 1, 64, 1, 4, 105, 110, 105, 116, 1, 0, 2, 4, 0, 20, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 110, 97, 116, 117, 114, 97, 108, 1, 3, 1, 64, 0, 0, 2, 4, 0, 20, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 122, 101, 114, 111, 1, 4, 4, 0, 19, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 111, 110, 101, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 121, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 51, 50, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 119, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 5, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 110, 97, 116, 1, 8, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 97, 116, 117, 114, 97, 108, 5, 1, 2, 3, 0, 1, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 26, 2, 3, 2, 1, 2, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 0, 1, 109, 3, 7, 117, 110, 45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115, 105, 103, 110, 3, 0, 2, 1, 105, 1, 1, 114, 2, 4, 115, 105, 103, 110, 3, 7, 110, 97, 116, 117, 114, 97, 108, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 5, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 121, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 119, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 8, 1, 104, 1, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 9, 0, 6, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 10, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 122, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 11, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 120, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 6, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 7, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 8, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 10, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 11, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 13, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 5, 3, 2, 3, 0, 2, 7, 105, 110, 116, 101, 103, 101, 114, 2, 3, 0, 2, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 11, 2, 3, 2, 1, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 4, 1, 107, 5, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 6, 4, 0, 3, 110, 101, 119, 1, 7, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 5, 4, 0, 11, 117, 110, 99, 104, 101, 99, 107, 45, 110, 101, 119, 1, 8, 3, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 111, 114, 100, 105, 110, 97, 108, 5, 6, 1, 66, 15, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 1, 1, 112, 121, 1, 105, 0, 1, 64, 1, 4, 105, 110, 105, 116, 1, 0, 2, 4, 0, 20, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 110, 97, 116, 117, 114, 97, 108, 1, 3, 1, 64, 0, 0, 2, 4, 0, 20, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 122, 101, 114, 111, 1, 4, 4, 0, 19, 91, 115, 116, 97, 116, 105, 99, 93, 110, 97, 116, 117, 114, 97, 108, 46, 111, 110, 101, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 121, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 51, 50, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 119, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 117, 54, 52, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 5, 3, 114, 104, 115, 5, 0, 2, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 97, 116, 117, 114, 97, 108, 46, 97, 100, 100, 45, 110, 97, 116, 1, 8, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 97, 116, 117, 114, 97, 108, 5, 7, 1, 66, 26, 2, 3, 2, 1, 2, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 0, 1, 109, 3, 7, 117, 110, 45, 115, 105, 103, 110, 8, 112, 111, 115, 105, 116, 105, 118, 101, 8, 110, 101, 103, 97, 116, 105, 118, 101, 4, 0, 4, 115, 105, 103, 110, 3, 0, 2, 1, 105, 1, 1, 114, 2, 4, 115, 105, 103, 110, 3, 7, 110, 97, 116, 117, 114, 97, 108, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 5, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 121, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 119, 0, 6, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 8, 1, 104, 1, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 9, 0, 6, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 10, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 122, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 11, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 120, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 6, 3, 114, 104, 115, 6, 0, 6, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 13, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 7, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 8, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 10, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 11, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 13, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 105, 110, 116, 101, 103, 101, 114, 5, 8, 1, 66, 11, 2, 3, 2, 1, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 4, 1, 107, 5, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 6, 4, 0, 3, 110, 101, 119, 1, 7, 1, 64, 1, 7, 105, 110, 116, 101, 103, 101, 114, 1, 0, 5, 4, 0, 11, 117, 110, 99, 104, 101, 99, 107, 45, 110, 101, 119, 1, 8, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 111, 114, 100, 105, 110, 97, 108, 5, 9, 1, 66, 7, 1, 112, 121, 1, 114, 1, 1, 120, 0, 4, 0, 7, 100, 101, 99, 105, 109, 97, 108, 3, 0, 1, 1, 64, 2, 4, 115, 101, 108, 102, 2, 3, 114, 104, 115, 118, 0, 2, 4, 0, 7, 97, 100, 100, 45, 102, 51, 50, 1, 3, 1, 64, 2, 4, 115, 101, 108, 102, 2, 3, 114, 104, 115, 117, 0, 2, 4, 0, 7, 97, 100, 100, 45, 102, 54, 52, 1, 4, 4, 1, 18, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 100, 101, 99, 105, 109, 97, 108, 5, 10, 2, 3, 0, 5, 4, 115, 105, 103, 110, 1, 66, 28, 2, 3, 2, 1, 11, 4, 0, 4, 115, 105, 103, 110, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 2, 3, 2, 1, 4, 4, 0, 7, 105, 110, 116, 101, 103, 101, 114, 3, 0, 4, 1, 105, 3, 1, 114, 3, 4, 115, 105, 103, 110, 1, 9, 110, 117, 109, 101, 114, 97, 116, 111, 114, 6, 11, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 6, 4, 0, 8, 102, 114, 97, 99, 116, 105, 111, 110, 3, 0, 7, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 121, 0, 8, 4, 0, 7, 97, 100, 100, 45, 117, 51, 50, 1, 9, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 119, 0, 8, 4, 0, 7, 97, 100, 100, 45, 117, 54, 52, 1, 10, 1, 104, 3, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 11, 0, 8, 4, 0, 7, 97, 100, 100, 45, 110, 97, 116, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 122, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 51, 50, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 120, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 54, 52, 1, 14, 1, 64, 2, 4, 115, 101, 108, 102, 8, 3, 114, 104, 115, 5, 0, 8, 4, 0, 7, 97, 100, 100, 45, 105, 110, 116, 1, 15, 4, 0, 7, 115, 117, 98, 45, 117, 51, 50, 1, 9, 4, 0, 7, 115, 117, 98, 45, 117, 54, 52, 1, 10, 4, 0, 7, 115, 117, 98, 45, 110, 97, 116, 1, 12, 4, 0, 7, 115, 117, 98, 45, 105, 51, 50, 1, 13, 4, 0, 7, 115, 117, 98, 45, 105, 54, 52, 1, 14, 4, 0, 7, 115, 117, 98, 45, 105, 110, 116, 1, 15, 4, 1, 19, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 102, 114, 97, 99, 116, 105, 111, 110, 5, 12, 2, 3, 0, 6, 7, 111, 114, 100, 105, 110, 97, 108, 2, 3, 0, 6, 7, 110, 97, 116, 117, 114, 97, 108, 1, 66, 17, 2, 3, 2, 1, 13, 4, 0, 7, 111, 114, 100, 105, 110, 97, 108, 3, 0, 0, 2, 3, 2, 1, 14, 4, 0, 7, 110, 97, 116, 117, 114, 97, 108, 3, 0, 2, 1, 114, 1, 7, 111, 114, 100, 105, 110, 97, 108, 1, 4, 0, 5, 112, 114, 105, 109, 101, 3, 0, 4, 1, 64, 1, 7, 111, 114, 100, 105, 110, 97, 108, 1, 0, 5, 4, 0, 3, 110, 101, 119, 1, 6, 1, 105, 3, 1, 64, 1, 1, 110, 7, 0, 127, 4, 0, 9, 99, 104, 101, 99, 107, 45, 110, 97, 116, 1, 8, 1, 64, 1, 4, 115, 101, 108, 102, 5, 0, 5, 4, 0, 9, 105, 116, 101, 114, 45, 110, 101, 120, 116, 1, 9, 4, 0, 9, 105, 116, 101, 114, 45, 112, 114, 101, 118, 1, 9, 1, 64, 1, 1, 110, 7, 0, 5, 4, 0, 11, 97, 114, 111, 117, 110, 100, 45, 112, 114, 101, 118, 1, 10, 4, 0, 11, 97, 114, 111, 117, 110, 100, 45, 110, 101, 120, 116, 1, 10, 4, 1, 16, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 112, 114, 105, 109, 101, 5, 15, 4, 1, 21, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 110, 117, 109, 98, 101, 114, 45, 102, 102, 105, 4, 16, 11, 20, 1, 1, 14, 118, 105, 116, 58, 110, 117, 109, 98, 101, 114, 47, 119, 105, 116, 3, 0, 0, 0, 227, 1, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 100, 101, 99, 105, 109, 97, 108, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 100, 101, 99, 105, 109, 97, 108, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 98, 117, 102, 102, 101, 114, 34, 125, 125, 125, 44, 34, 110, 97, 116, 117, 114, 97, 108, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 110, 97, 116, 117, 114, 97, 108, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 98, 117, 102, 102, 101, 114, 34, 125, 125, 125, 44, 34, 112, 114, 105, 109, 101, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 112, 114, 105, 109, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 98, 117, 102, 102, 101, 114, 34, 125, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 55, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 50];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
